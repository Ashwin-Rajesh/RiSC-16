$date
	Fri Jan  8 16:09:50 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module mem_reg_tb $end
$var wire 16 ! dataOut [15:0] $end
$var reg 16 " address [15:0] $end
$var reg 1 # clk $end
$var reg 16 $ dataIn [15:0] $end
$var reg 1 % rst $end
$var reg 1 & writeEn $end
$var integer 32 ' i [31:0] $end
$scope module tud $end
$var wire 16 ( address [15:0] $end
$var wire 1 # clk $end
$var wire 16 ) dataIn [15:0] $end
$var wire 1 % rst $end
$var wire 1 & writeEn $end
$var wire 16 * dataOut [15:0] $end
$var wire 10 + address_trunc [9:0] $end
$var integer 32 , i [31:0] $end
$upscope $end
$upscope $end
$scope module mem_reg_tb $end
$scope module tud $end
$var reg 8 - \memory[0] [7:0] $end
$upscope $end
$upscope $end
$scope module mem_reg_tb $end
$scope module tud $end
$var reg 8 . \memory[1] [7:0] $end
$upscope $end
$upscope $end
$scope module mem_reg_tb $end
$scope module tud $end
$var reg 8 / \memory[2] [7:0] $end
$upscope $end
$upscope $end
$scope module mem_reg_tb $end
$scope module tud $end
$var reg 8 0 \memory[3] [7:0] $end
$upscope $end
$upscope $end
$scope module mem_reg_tb $end
$scope module tud $end
$var reg 8 1 \memory[4] [7:0] $end
$upscope $end
$upscope $end
$scope module mem_reg_tb $end
$scope module tud $end
$var reg 8 2 \memory[5] [7:0] $end
$upscope $end
$upscope $end
$scope module mem_reg_tb $end
$scope module tud $end
$var reg 8 3 \memory[6] [7:0] $end
$upscope $end
$upscope $end
$scope module mem_reg_tb $end
$scope module tud $end
$var reg 8 4 \memory[7] [7:0] $end
$upscope $end
$upscope $end
$scope module mem_reg_tb $end
$scope module tud $end
$var reg 8 5 \memory[8] [7:0] $end
$upscope $end
$upscope $end
$scope module mem_reg_tb $end
$scope module tud $end
$var reg 8 6 \memory[9] [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
b1010 '
x&
1%
bx $
0#
bx "
bx !
$end
#1
b0 6
b0 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b111110100 ,
1#
#2
b0 !
b0 *
b0 +
0#
b1010 $
b1010 )
b0 '
1&
b0 "
b0 (
0%
#3
b0 -
b1010 .
b1010 !
b1010 *
1#
#4
b0 !
b0 *
b10 +
0#
b10 "
b10 (
b1011 $
b1011 )
b1 '
#5
b0 /
b1011 0
b1011 !
b1011 *
1#
#6
b0 !
b0 *
b100 +
0#
b100 "
b100 (
b1110 $
b1110 )
b10 '
#7
b0 1
b1110 2
b1110 !
b1110 *
1#
#8
b0 !
b0 *
b110 +
0#
b110 "
b110 (
b10011 $
b10011 )
b11 '
#9
b0 3
b10011 4
b10011 !
b10011 *
1#
#10
b0 !
b0 *
b1000 +
0#
b1000 "
b1000 (
b11010 $
b11010 )
b100 '
#11
b0 5
b11010 6
b11010 !
b11010 *
1#
#12
b0 !
b0 *
b1010 +
0#
b1010 "
b1010 (
b100011 $
b100011 )
b101 '
#13
b100011 !
b100011 *
1#
#14
b0 !
b0 *
b1100 +
0#
b1100 "
b1100 (
b101110 $
b101110 )
b110 '
#15
b101110 !
b101110 *
1#
#16
b0 !
b0 *
b1110 +
0#
b1110 "
b1110 (
b111011 $
b111011 )
b111 '
#17
b111011 !
b111011 *
1#
#18
b1010 !
b1010 *
b0 +
0#
b0 "
b0 (
0&
b0 '
#19
1#
#20
b1011 !
b1011 *
b10 +
0#
b10 "
b10 (
b1 '
#21
1#
#22
b1110 !
b1110 *
b100 +
0#
b100 "
b100 (
b10 '
#23
1#
#24
b10011 !
b10011 *
b110 +
0#
b110 "
b110 (
b11 '
#25
1#
#26
b11010 !
b11010 *
b1000 +
0#
b1000 "
b1000 (
b100 '
#27
1#
#28
b100011 !
b100011 *
b1010 +
0#
b1010 "
b1010 (
b101 '
#29
1#
#30
b101110 !
b101110 *
b1100 +
0#
b1100 "
b1100 (
b110 '
#31
1#
#32
b111011 !
b111011 *
b1110 +
0#
b1110 "
b1110 (
b111 '
#33
1#
#34
0#
b1000 '
